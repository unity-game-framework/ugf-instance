using System;
using System.Collections;
using System.Collections.Generic;

namespace UGF.Instance.Runtime
{
    /// <summary>
    /// Collection to store instances with unique identifiers, generated by specified <see cref="IInstanceIdentifierGenerator{TIdentifier}"/>.
    /// </summary>
    public class InstanceCollection<TIdentifier, TInstance> : IInstanceCollection<TIdentifier, TInstance>
    {
        public int Count { get { return m_instances.Count; } }
        public IInstanceIdentifierGenerator<TIdentifier> Generator { get; }

        IInstanceIdentifierGenerator IInstanceCollection.Generator { get { return Generator; } }

        private readonly Dictionary<TIdentifier, TInstance> m_instances = new Dictionary<TIdentifier, TInstance>();
        
        /// <summary>
        /// Creates new instance collection with specified instance identifier generator.
        /// </summary>
        /// <param name="generator">The generator used to create new identifiers.</param>
        public InstanceCollection(IInstanceIdentifierGenerator<TIdentifier> generator)
        {
            Generator = generator ?? throw new ArgumentNullException(nameof(generator));
        }

        protected virtual TIdentifier OnGenerateIdentifier()
        {
            return Generator.Generate();
        }
        
        public bool Contains(TIdentifier identifier)
        {   
            return m_instances.ContainsKey(identifier);
        }

        public virtual TIdentifier Add(TInstance instance)
        {
            var id = OnGenerateIdentifier();

            m_instances.Add(id, instance);

            return id;
        }

        public virtual bool Remove(TIdentifier identifier)
        {
            return m_instances.Remove(identifier);
        }

        public bool TryGetInstance(TIdentifier identifier, out TInstance instance)
        {
            return m_instances.TryGetValue(identifier, out instance);
        }

        public virtual void Clear()
        {
            m_instances.Clear();
        }

        public Type GetIdentifierType()
        {
            return typeof(TIdentifier);
        }

        public Type GetInstanceType()
        {
            return typeof(TInstance);
        }

        public Dictionary<TIdentifier, TInstance>.Enumerator GetEnumerator()
        {
            return m_instances.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return ((IEnumerable)m_instances).GetEnumerator();
        }
        
        IEnumerator<KeyValuePair<TIdentifier, TInstance>> IEnumerable<KeyValuePair<TIdentifier, TInstance>>.GetEnumerator()
        {
            return ((IEnumerable<KeyValuePair<TIdentifier, TInstance>>)m_instances).GetEnumerator();
        }
    }
}